#A few kis didn't answer on one trial and will need to be manually dropped
subtable <- subtable[subtable$isPragChoiceA != "NA",]
subtable <- subtable[subtable$isPragChoiceB != "NA",]
subtable$isPragChoiceA <- as.numeric(as.character(subtable$isPragChoiceA))
subtable$isPragChoiceB <- as.numeric(as.character(subtable$isPragChoiceB))
#Express this as # chose 'correct' across experiment
subtable$pragChoiceScore <- subtable$isPragChoiceA + subtable$isPragChoiceB
#...Or as # chose to drop the object
subtable$choseObjectDrop <- subtable$pragChoiceScore
subtable[subtable$Condition == "SD",]$choseObjectDrop <- 2-subtable[subtable$Condition == "SD",]$pragChoiceScore
####################################
#Descriptive stats for graphing (Developmental, small sample, so we'll present hist. of kids choosing each asnwer, rather than proportion scores)
#Time to split up the kids into Main and Control experiments
maintable <- subtable[subtable$Experiment == "ParentSecret",]
conttable <- subtable[subtable$Experiment == "ParentSecretControl" | subtable$Experiment == "ParentSecretControl2",]
#Toss older/younger accidental participant from conttable, it's just for 3-4yos
conttable <- conttable[conttable$Age.Years < 5,]
conttable <- conttable[conttable$Age.Years > 2,]
with(maintable, tapply(as.numeric(as.character(Final.Include)), list(Condition, Age.Years), sum.na.rm), drop=TRUE)
with(conttable, tapply(as.numeric(as.character(Final.Include)), list(Condition, Age.Years), sum.na.rm), drop=TRUE)
length(unique(maintable$Subject..))
length(unique(conttable$Subject..))
library(irr)
library(stringr)
#library(languageR) #Might be deprecated?
library(lme4)
library(multcomp)
library(binom)
library(dplyr)
library(lsr)
library(EMT)
library(ggplot2)
library(bootstrap)
library(liftr)
library(tufte)
mean.na.rm <- function(x) { mean(x,na.rm=T) }
sum.na.rm <- function(x) { sum(x,na.rm=T) }
stderr <- function(x) sqrt(var(x)/length(x))
bootup <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.975)[1])
}
bootdown <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.025)[1])
}
#Get directory of this file
directory = getwd()
datadir = str_replace(directory, '/Analysis pipeline','/Data')
subtable = data.frame(NULL)
subtable = read.csv(paste0(datadir, "/SubDrop_reconciled.csv"), header = TRUE, stringsAsFactors = FALSE)
head(subtable[,1:10], n=3)
#Fix some badly formatted columns
subtable$Kid.Response.A...Prag.Choice. <- as.character (subtable$Kid.Response.A...Prag.Choice.)
subtable$Kid.Response.B...Prag.Choice. <- as.character (subtable$Kid.Response.B...Prag.Choice.)
subtable$Gender <- subtable$Gender..Guessed.from.Name.Appearance.
subtable[is.na(subtable)] <- 0
#Fix age calculations!
subtable$Age.Years <- as.numeric(as.character(subtable$Age.Years))
subtable$Days.Old <- as.numeric(as.character(subtable$Days.Old))
#(A couple NAs introduced, but they are from 2 dummy lines + 1 kid who was the wrong age for the study)
####################################
#Pick subset of data to analyze (experiment, kids included)
#Choose 'ParentSecret' and 'ParentSecretControl' study versions
subtable <- subtable[subtable$Experiment == "ParentSecret" | subtable$Experiment == "ParentSecretControl" | subtable$Experiment == "ParentSecretControl2" ,]
subtable[subtable$Experiment ==  "ParentSecretControl2",]$Experiment <- "ParentSecretControl"
#chose stricter inclusion criteria.., following new paradigm rules dropped <- subtable[subtable$Final.Include == 0,]
dropped <- subtable[subtable$Final.Include == 0,]
subtable <- subtable[subtable$Final.Include == 1,]
#who & why excluded from analysis?
table(dropped$Final.Reason, dropped$Experiment)
# Recode condition variables
#SD: 'subject drop' is the 'correct answer', other name for this condition is 'two fruits'
#OD: aka 'two animals'
#
subtable$oldCond <- subtable$Condition
subtable[subtable$Condition == "SDOD",]$Condition <- "SD"
subtable[subtable$Condition == "SDSD",]$Condition <- "SD"
subtable[subtable$Condition == "ODSD",]$Condition <- "OD"
subtable[subtable$Condition == "ODOD",]$Condition <- "OD"
## Code Correctness!  For main experiment, correctness = chose the pragmatic one; For cont, correctness = chose the correct one! (this is the same! wrong answers differ though)
subtable$isPragChoiceA <- "NA"
subtable[subtable$Condition == "SD" & subtable$Kid.Response.A...Prag.Choice. == "eat orange",]$isPragChoiceA <- 1
subtable[subtable$Condition == "OD" & subtable$Kid.Response.A...Prag.Choice. == "monkey eat",]$isPragChoiceA <- 1
subtable[subtable$Condition == "SD" & subtable$Kid.Response.A...Prag.Choice. == "monkey eat",]$isPragChoiceA <- 0
subtable[subtable$Condition == "OD" & subtable$Kid.Response.A...Prag.Choice. == "eat orange",]$isPragChoiceA <- 0
subtable[subtable$Condition == "SD" & subtable$Kid.Response.A...Prag.Choice. == "eat banana",]$isPragChoiceA <- 0
subtable[subtable$Condition == "OD" & subtable$Kid.Response.A...Prag.Choice. == "duck eat",]$isPragChoiceA <- 0
subtable$isPragChoiceB <- "NA"
subtable[subtable$Condition == "SD" & subtable$Kid.Response.B...Prag.Choice. == "pet dog",]$isPragChoiceB <- 1
subtable[subtable$Condition == "OD" & subtable$Kid.Response.B...Prag.Choice. == "girl pet",]$isPragChoiceB <- 1
subtable[subtable$Condition == "SD" & subtable$Kid.Response.B...Prag.Choice. == "girl pet",]$isPragChoiceB <- 0
subtable[subtable$Condition == "OD" & subtable$Kid.Response.B...Prag.Choice. == "pet dog",]$isPragChoiceB <- 0
subtable[subtable$Condition == "SD" & subtable$Kid.Response.B...Prag.Choice. == "pet cat",]$isPragChoiceB <- 0
subtable[subtable$Condition == "SD" & subtable$Kid.Response.B...Prag.Choice. == "pet kitty",]$isPragChoiceB <- 0 #lexical alternative!
subtable[subtable$Condition == "OD" & subtable$Kid.Response.B...Prag.Choice. == "boy pet",]$isPragChoiceB <- 0
#A few kis didn't answer on one trial and will need to be manually dropped
subtable <- subtable[subtable$isPragChoiceA != "NA",]
subtable <- subtable[subtable$isPragChoiceB != "NA",]
subtable$isPragChoiceA <- as.numeric(as.character(subtable$isPragChoiceA))
subtable$isPragChoiceB <- as.numeric(as.character(subtable$isPragChoiceB))
#Express this as # chose 'correct' across experiment
subtable$pragChoiceScore <- subtable$isPragChoiceA + subtable$isPragChoiceB
#...Or as # chose to drop the object
subtable$choseObjectDrop <- subtable$pragChoiceScore
subtable[subtable$Condition == "SD",]$choseObjectDrop <- 2-subtable[subtable$Condition == "SD",]$pragChoiceScore
####################################
#Descriptive stats for graphing (Developmental, small sample, so we'll present hist. of kids choosing each asnwer, rather than proportion scores)
#Time to split up the kids into Main and Control experiments
maintable <- subtable[subtable$Experiment == "ParentSecret",]
conttable <- subtable[subtable$Experiment == "ParentSecretControl" | subtable$Experiment == "ParentSecretControl2",]
#Toss older/younger accidental participant from conttable, it's just for 3-4yos
conttable <- conttable[conttable$Age.Years < 5,]
conttable <- conttable[conttable$Age.Years > 2,]
with(maintable, tapply(as.numeric(as.character(Final.Include)), list(Condition, Age.Years), sum.na.rm), drop=TRUE)
with(conttable, tapply(as.numeric(as.character(Final.Include)), list(Condition, Age.Years), sum.na.rm), drop=TRUE)
maintable$Condition <- as.factor(maintable$Condition)
maintable$Subject <- as.factor(maintable$Subject..)
maintable$choseObjectDrop <- as.factor(maintable$choseObjectDrop)
maintable$pragChoice_1 <- maintable$isPragChoiceA
maintable$pragChoice_2 <- maintable$isPragChoiceB
#Get the objective coding scheme back :)
main.long = wideToLong(maintable,within="trial", sep='_')
main.long$choseObjectDrop <- main.long$pragChoice
main.long[main.long$Condition == "SD",]$choseObjectDrop <- 1-main.long[main.long$Condition == "SD",]$pragChoice
conttable$Condition <- as.factor(conttable$Condition)
conttable$Subject <- as.factor(conttable$Subject..)
conttable$choseObjectDrop <- as.factor(conttable$choseObjectDrop)
conttable$pragChoice_1 <- conttable$isPragChoiceA
conttable$pragChoice_2 <- conttable$isPragChoiceB
#Get the objective coding scheme back :)
cont.long = wideToLong(conttable,within="trial", sep='_')
cont.long$choseObjectDrop <- cont.long$pragChoice
cont.long[cont.long$Condition == "SD",]$choseObjectDrop <- 1-cont.long[cont.long$Condition == "SD",]$pragChoice
View(cont.long)
```{r report-percentage}
with(maintable, tapply(choseObjectDrop, list(Condition), mean.na.rm), drop=TRUE)
with(maintable, tapply(as.numeric(as.character(choseObjectDrop)), list(Condition), mean.na.rm), drop=TRUE)
with(maintable, tapply(as.numeric(as.character(choseObjectDrop)), list(Condition), mean.na.rm/2), drop=TRUE)
numChoose = with(maintable, tapply(as.numeric(as.character(choseObjectDrop)), list(Condition), mean.na.rm), drop=TRUE)
numChoose/2
disp('f')
prin('f')
print('f')
conttab <- rbind(as.vector(table(fours_c$pragChoiceScore)), as.vector(table(threes_c$pragChoiceScore)))
library(irr)
library(stringr)
#library(languageR) #Might be deprecated?
library(lme4)
library(multcomp)
library(binom)
library(dplyr)
library(lsr)
library(EMT)
library(ggplot2)
library(bootstrap)
library(liftr)
library(tufte)
mean.na.rm <- function(x) { mean(x,na.rm=T) }
sum.na.rm <- function(x) { sum(x,na.rm=T) }
stderr <- function(x) sqrt(var(x)/length(x))
bootup <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.975)[1])
}
bootdown <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.025)[1])
}
#Get directory of this file
directory = getwd()
datadir = str_replace(directory, '/Analysis pipeline','/Data')
subtable = data.frame(NULL)
subtable = read.csv(paste0(datadir, "/SubDrop_reconciled.csv"), header = TRUE, stringsAsFactors = FALSE)
head(subtable[,1:10], n=3)
#Fix some badly formatted columns
subtable$Kid.Response.A...Prag.Choice. <- as.character (subtable$Kid.Response.A...Prag.Choice.)
subtable$Kid.Response.B...Prag.Choice. <- as.character (subtable$Kid.Response.B...Prag.Choice.)
subtable$Gender <- subtable$Gender..Guessed.from.Name.Appearance.
subtable[is.na(subtable)] <- 0
#Fix age calculations!
subtable$Age.Years <- as.numeric(as.character(subtable$Age.Years))
subtable$Days.Old <- as.numeric(as.character(subtable$Days.Old))
#(A couple NAs introduced, but they are from 2 dummy lines + 1 kid who was the wrong age for the study)
####################################
#Pick subset of data to analyze (experiment, kids included)
#Choose 'ParentSecret' and 'ParentSecretControl' study versions
subtable <- subtable[subtable$Experiment == "ParentSecret" | subtable$Experiment == "ParentSecretControl" | subtable$Experiment == "ParentSecretControl2" ,]
subtable[subtable$Experiment ==  "ParentSecretControl2",]$Experiment <- "ParentSecretControl"
#chose stricter inclusion criteria.., following new paradigm rules dropped <- subtable[subtable$Final.Include == 0,]
dropped <- subtable[subtable$Final.Include == 0,]
subtable <- subtable[subtable$Final.Include == 1,]
#who & why excluded from analysis?
table(dropped$Final.Reason, dropped$Experiment)
# Recode condition variables
#SD: 'subject drop' is the 'correct answer', other name for this condition is 'two fruits'
#OD: aka 'two animals'
#
subtable$oldCond <- subtable$Condition
subtable[subtable$Condition == "SDOD",]$Condition <- "SD"
subtable[subtable$Condition == "SDSD",]$Condition <- "SD"
subtable[subtable$Condition == "ODSD",]$Condition <- "OD"
subtable[subtable$Condition == "ODOD",]$Condition <- "OD"
## Code Correctness!  For main experiment, correctness = chose the pragmatic one; For cont, correctness = chose the correct one! (this is the same! wrong answers differ though)
subtable$isPragChoiceA <- "NA"
subtable[subtable$Condition == "SD" & subtable$Kid.Response.A...Prag.Choice. == "eat orange",]$isPragChoiceA <- 1
subtable[subtable$Condition == "OD" & subtable$Kid.Response.A...Prag.Choice. == "monkey eat",]$isPragChoiceA <- 1
subtable[subtable$Condition == "SD" & subtable$Kid.Response.A...Prag.Choice. == "monkey eat",]$isPragChoiceA <- 0
subtable[subtable$Condition == "OD" & subtable$Kid.Response.A...Prag.Choice. == "eat orange",]$isPragChoiceA <- 0
subtable[subtable$Condition == "SD" & subtable$Kid.Response.A...Prag.Choice. == "eat banana",]$isPragChoiceA <- 0
subtable[subtable$Condition == "OD" & subtable$Kid.Response.A...Prag.Choice. == "duck eat",]$isPragChoiceA <- 0
subtable$isPragChoiceB <- "NA"
subtable[subtable$Condition == "SD" & subtable$Kid.Response.B...Prag.Choice. == "pet dog",]$isPragChoiceB <- 1
subtable[subtable$Condition == "OD" & subtable$Kid.Response.B...Prag.Choice. == "girl pet",]$isPragChoiceB <- 1
subtable[subtable$Condition == "SD" & subtable$Kid.Response.B...Prag.Choice. == "girl pet",]$isPragChoiceB <- 0
subtable[subtable$Condition == "OD" & subtable$Kid.Response.B...Prag.Choice. == "pet dog",]$isPragChoiceB <- 0
subtable[subtable$Condition == "SD" & subtable$Kid.Response.B...Prag.Choice. == "pet cat",]$isPragChoiceB <- 0
subtable[subtable$Condition == "SD" & subtable$Kid.Response.B...Prag.Choice. == "pet kitty",]$isPragChoiceB <- 0 #lexical alternative!
subtable[subtable$Condition == "OD" & subtable$Kid.Response.B...Prag.Choice. == "boy pet",]$isPragChoiceB <- 0
#A few kis didn't answer on one trial and will need to be manually dropped
subtable <- subtable[subtable$isPragChoiceA != "NA",]
subtable <- subtable[subtable$isPragChoiceB != "NA",]
subtable$isPragChoiceA <- as.numeric(as.character(subtable$isPragChoiceA))
subtable$isPragChoiceB <- as.numeric(as.character(subtable$isPragChoiceB))
#Express this as # chose 'correct' across experiment
subtable$pragChoiceScore <- subtable$isPragChoiceA + subtable$isPragChoiceB
#...Or as # chose to drop the object
subtable$choseObjectDrop <- subtable$pragChoiceScore
subtable[subtable$Condition == "SD",]$choseObjectDrop <- 2-subtable[subtable$Condition == "SD",]$pragChoiceScore
####################################
#Descriptive stats for graphing (Developmental, small sample, so we'll present hist. of kids choosing each asnwer, rather than proportion scores)
#Time to split up the kids into Main and Control experiments
maintable <- subtable[subtable$Experiment == "ParentSecret",]
conttable <- subtable[subtable$Experiment == "ParentSecretControl" | subtable$Experiment == "ParentSecretControl2",]
#Toss older/younger accidental participant from conttable, it's just for 3-4yos
conttable <- conttable[conttable$Age.Years < 5,]
conttable <- conttable[conttable$Age.Years > 2,]
with(maintable, tapply(as.numeric(as.character(Final.Include)), list(Condition, Age.Years), sum.na.rm), drop=TRUE)
with(conttable, tapply(as.numeric(as.character(Final.Include)), list(Condition, Age.Years), sum.na.rm), drop=TRUE)
numChoose = with(maintable, tapply(as.numeric(as.character(choseObjectDrop)), list(Condition), mean.na.rm), drop=TRUE)
numChoose/2 #(Two trials chosen, dataset is still in wide form here)
maintable$Condition <- as.factor(maintable$Condition)
maintable$Subject <- as.factor(maintable$Subject..)
maintable$choseObjectDrop <- as.factor(maintable$choseObjectDrop)
maintable$pragChoice_1 <- maintable$isPragChoiceA
maintable$pragChoice_2 <- maintable$isPragChoiceB
#Get the objective coding scheme back :)
main.long = wideToLong(maintable,within="trial", sep='_')
main.long$choseObjectDrop <- main.long$pragChoice
main.long[main.long$Condition == "SD",]$choseObjectDrop <- 1-main.long[main.long$Condition == "SD",]$pragChoice
conttable$Condition <- as.factor(conttable$Condition)
conttable$Subject <- as.factor(conttable$Subject..)
conttable$choseObjectDrop <- as.factor(conttable$choseObjectDrop)
conttable$pragChoice_1 <- conttable$isPragChoiceA
conttable$pragChoice_2 <- conttable$isPragChoiceB
#Get the objective coding scheme back :)
cont.long = wideToLong(conttable,within="trial", sep='_')
cont.long$choseObjectDrop <- cont.long$pragChoice
cont.long[cont.long$Condition == "SD",]$choseObjectDrop <- 1-cont.long[cont.long$Condition == "SD",]$pragChoice
full_maximal_model <- glmer(choseObjectDrop ~ Condition + (Condition|trial) + (1|Subject), data=main.long, family="binomial")
#compare to model w/o fixed effect
no_fixed <- glmer(choseObjectDrop ~ 1 + (Condition|trial) + (1|Subject), data=main.long, family="binomial")
anova(full_maximal_model, no_fixed)
#Scale age-in-days (by z score), to avoid convergence problems
main.long$Scaled.Days.Old <- scale(main.long$Days.Old)
fullmax_age_model <- glmer(pragChoice ~ Scaled.Days.Old + (1|trial) + (1|Subject), data=main.long, family="binomial")
#model with same random effects structure as above
no_age <- glmer(pragChoice ~ 1 + (1|trial) + (1|Subject), data=main.long, family="binomial")
anova(fullmax_age_model, no_age)
#Scale age (z score), to avoid convergence problems
cont.long$Scaled.Days.Old <- scale(cont.long$Days.Old)
# Logistic Regression model.
full_max_cont_model <- glmer(pragChoice ~ Scaled.Days.Old + (1|trial) + (1|Subject), data=cont.long, family="binomial")
no_age_cont_model <- glmer(pragChoice ~ 1 + (1|trial) + (1|Subject), data=cont.long, family="binomial")
anova(full_max_cont_model, no_age_cont_model)
threes_m <- subset(maintable, Age.Years == 3)
fours_m <- subset(maintable, Age.Years == 4)
fives <- subset(maintable, Age.Years == 5)
sixes <- subset(maintable, Age.Years == 6)
threes_c <- subset(conttable, Age.Years == 3)
fours_c <- subset(conttable, Age.Years == 4)
print('threes')
multinomial.test(as.vector(table(threes_m$pragChoiceScore)),c(0.25, 0.5, 0.25))
print('fours')
multinomial.test(as.vector(table(fours_m$pragChoiceScore)),c(0.25, 0.5, 0.25))
print('fives')
multinomial.test(as.vector(table(fives$pragChoiceScore)),c(0.25, 0.5, 0.25))
print('sixes')
multinomial.test(as.vector(table(sixes$pragChoiceScore)),c(0.25, 0.5, 0.25))
print('threes, control experiment')
multinomial.test(as.vector(table(threes_c$pragChoiceScore)),c(0.25, 0.5, 0.25))
print('fours, control experiment')
multinomial.test(as.vector(table(fours_c$pragChoiceScore)),c(0.25, 0.5, 0.25))
conttab <- rbind(as.vector(table(fours_c$pragChoiceScore)), as.vector(table(threes_c$pragChoiceScore)))
fisher.test(threetab)
library(irr)
library(stringr)
#library(languageR) #Might be deprecated?
library(lme4)
library(multcomp)
library(binom)
library(dplyr)
library(lsr)
library(EMT)
library(ggplot2)
library(bootstrap)
library(liftr)
library(tufte)
mean.na.rm <- function(x) { mean(x,na.rm=T) }
sum.na.rm <- function(x) { sum(x,na.rm=T) }
stderr <- function(x) sqrt(var(x)/length(x))
bootup <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.975)[1])
}
bootdown <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.025)[1])
}
#Get directory of this file
directory = getwd()
datadir = str_replace(directory, '/Analysis pipeline','/Data')
subtable = data.frame(NULL)
subtable = read.csv(paste0(datadir, "/SubDrop_reconciled.csv"), header = TRUE, stringsAsFactors = FALSE)
head(subtable[,1:10], n=3)
#Fix some badly formatted columns
subtable$Kid.Response.A...Prag.Choice. <- as.character (subtable$Kid.Response.A...Prag.Choice.)
subtable$Kid.Response.B...Prag.Choice. <- as.character (subtable$Kid.Response.B...Prag.Choice.)
subtable$Gender <- subtable$Gender..Guessed.from.Name.Appearance.
subtable[is.na(subtable)] <- 0
#Fix age calculations!
subtable$Age.Years <- as.numeric(as.character(subtable$Age.Years))
subtable$Days.Old <- as.numeric(as.character(subtable$Days.Old))
#(A couple NAs introduced, but they are from 2 dummy lines + 1 kid who was the wrong age for the study)
####################################
#Pick subset of data to analyze (experiment, kids included)
#Choose 'ParentSecret' and 'ParentSecretControl' study versions
subtable <- subtable[subtable$Experiment == "ParentSecret" | subtable$Experiment == "ParentSecretControl" | subtable$Experiment == "ParentSecretControl2" ,]
subtable[subtable$Experiment ==  "ParentSecretControl2",]$Experiment <- "ParentSecretControl"
#chose stricter inclusion criteria.., following new paradigm rules dropped <- subtable[subtable$Final.Include == 0,]
dropped <- subtable[subtable$Final.Include == 0,]
subtable <- subtable[subtable$Final.Include == 1,]
#who & why excluded from analysis?
table(dropped$Final.Reason, dropped$Experiment)
# Recode condition variables
#SD: 'subject drop' is the 'correct answer', other name for this condition is 'two fruits'
#OD: aka 'two animals'
#
subtable$oldCond <- subtable$Condition
subtable[subtable$Condition == "SDOD",]$Condition <- "SD"
subtable[subtable$Condition == "SDSD",]$Condition <- "SD"
subtable[subtable$Condition == "ODSD",]$Condition <- "OD"
subtable[subtable$Condition == "ODOD",]$Condition <- "OD"
## Code Correctness!  For main experiment, correctness = chose the pragmatic one; For cont, correctness = chose the correct one! (this is the same! wrong answers differ though)
subtable$isPragChoiceA <- "NA"
subtable[subtable$Condition == "SD" & subtable$Kid.Response.A...Prag.Choice. == "eat orange",]$isPragChoiceA <- 1
subtable[subtable$Condition == "OD" & subtable$Kid.Response.A...Prag.Choice. == "monkey eat",]$isPragChoiceA <- 1
subtable[subtable$Condition == "SD" & subtable$Kid.Response.A...Prag.Choice. == "monkey eat",]$isPragChoiceA <- 0
subtable[subtable$Condition == "OD" & subtable$Kid.Response.A...Prag.Choice. == "eat orange",]$isPragChoiceA <- 0
subtable[subtable$Condition == "SD" & subtable$Kid.Response.A...Prag.Choice. == "eat banana",]$isPragChoiceA <- 0
subtable[subtable$Condition == "OD" & subtable$Kid.Response.A...Prag.Choice. == "duck eat",]$isPragChoiceA <- 0
subtable$isPragChoiceB <- "NA"
subtable[subtable$Condition == "SD" & subtable$Kid.Response.B...Prag.Choice. == "pet dog",]$isPragChoiceB <- 1
subtable[subtable$Condition == "OD" & subtable$Kid.Response.B...Prag.Choice. == "girl pet",]$isPragChoiceB <- 1
subtable[subtable$Condition == "SD" & subtable$Kid.Response.B...Prag.Choice. == "girl pet",]$isPragChoiceB <- 0
subtable[subtable$Condition == "OD" & subtable$Kid.Response.B...Prag.Choice. == "pet dog",]$isPragChoiceB <- 0
subtable[subtable$Condition == "SD" & subtable$Kid.Response.B...Prag.Choice. == "pet cat",]$isPragChoiceB <- 0
subtable[subtable$Condition == "SD" & subtable$Kid.Response.B...Prag.Choice. == "pet kitty",]$isPragChoiceB <- 0 #lexical alternative!
subtable[subtable$Condition == "OD" & subtable$Kid.Response.B...Prag.Choice. == "boy pet",]$isPragChoiceB <- 0
#A few kis didn't answer on one trial and will need to be manually dropped
subtable <- subtable[subtable$isPragChoiceA != "NA",]
subtable <- subtable[subtable$isPragChoiceB != "NA",]
subtable$isPragChoiceA <- as.numeric(as.character(subtable$isPragChoiceA))
subtable$isPragChoiceB <- as.numeric(as.character(subtable$isPragChoiceB))
#Express this as # chose 'correct' across experiment
subtable$pragChoiceScore <- subtable$isPragChoiceA + subtable$isPragChoiceB
#...Or as # chose to drop the object
subtable$choseObjectDrop <- subtable$pragChoiceScore
subtable[subtable$Condition == "SD",]$choseObjectDrop <- 2-subtable[subtable$Condition == "SD",]$pragChoiceScore
####################################
#Descriptive stats for graphing (Developmental, small sample, so we'll present hist. of kids choosing each asnwer, rather than proportion scores)
#Time to split up the kids into Main and Control experiments
maintable <- subtable[subtable$Experiment == "ParentSecret",]
conttable <- subtable[subtable$Experiment == "ParentSecretControl" | subtable$Experiment == "ParentSecretControl2",]
#Toss older/younger accidental participant from conttable, it's just for 3-4yos
conttable <- conttable[conttable$Age.Years < 5,]
conttable <- conttable[conttable$Age.Years > 2,]
with(maintable, tapply(as.numeric(as.character(Final.Include)), list(Condition, Age.Years), sum.na.rm), drop=TRUE)
with(conttable, tapply(as.numeric(as.character(Final.Include)), list(Condition, Age.Years), sum.na.rm), drop=TRUE)
numChoose = with(maintable, tapply(as.numeric(as.character(choseObjectDrop)), list(Condition), mean.na.rm), drop=TRUE)
numChoose/2 #(Two trials chosen, dataset is still in wide form here)
maintable$Condition <- as.factor(maintable$Condition)
maintable$Subject <- as.factor(maintable$Subject..)
maintable$choseObjectDrop <- as.factor(maintable$choseObjectDrop)
maintable$pragChoice_1 <- maintable$isPragChoiceA
maintable$pragChoice_2 <- maintable$isPragChoiceB
#Get the objective coding scheme back :)
main.long = wideToLong(maintable,within="trial", sep='_')
main.long$choseObjectDrop <- main.long$pragChoice
main.long[main.long$Condition == "SD",]$choseObjectDrop <- 1-main.long[main.long$Condition == "SD",]$pragChoice
conttable$Condition <- as.factor(conttable$Condition)
conttable$Subject <- as.factor(conttable$Subject..)
conttable$choseObjectDrop <- as.factor(conttable$choseObjectDrop)
conttable$pragChoice_1 <- conttable$isPragChoiceA
conttable$pragChoice_2 <- conttable$isPragChoiceB
#Get the objective coding scheme back :)
cont.long = wideToLong(conttable,within="trial", sep='_')
cont.long$choseObjectDrop <- cont.long$pragChoice
cont.long[cont.long$Condition == "SD",]$choseObjectDrop <- 1-cont.long[cont.long$Condition == "SD",]$pragChoice
full_maximal_model <- glmer(choseObjectDrop ~ Condition + (Condition|trial) + (1|Subject), data=main.long, family="binomial")
#compare to model w/o fixed effect
no_fixed <- glmer(choseObjectDrop ~ 1 + (Condition|trial) + (1|Subject), data=main.long, family="binomial")
anova(full_maximal_model, no_fixed)
#Scale age-in-days (by z score), to avoid convergence problems
main.long$Scaled.Days.Old <- scale(main.long$Days.Old)
fullmax_age_model <- glmer(pragChoice ~ Scaled.Days.Old + (1|trial) + (1|Subject), data=main.long, family="binomial")
#model with same random effects structure as above
no_age <- glmer(pragChoice ~ 1 + (1|trial) + (1|Subject), data=main.long, family="binomial")
anova(fullmax_age_model, no_age)
#Scale age (z score), to avoid convergence problems
cont.long$Scaled.Days.Old <- scale(cont.long$Days.Old)
# Logistic Regression model.
full_max_cont_model <- glmer(pragChoice ~ Scaled.Days.Old + (1|trial) + (1|Subject), data=cont.long, family="binomial")
no_age_cont_model <- glmer(pragChoice ~ 1 + (1|trial) + (1|Subject), data=cont.long, family="binomial")
anova(full_max_cont_model, no_age_cont_model)
main.long$Task <- 'main'
cont.long$Task <- 'cont'
threefour.long <- subset(rbind(main.long, cont.long), Age.Years < 5)
#full_max_three_model <- glmer(pragChoice ~ Task*Scaled.Days.Old + (Task|trial) + (1|Subject), data=threefour.long, family="binomial")
#noeff_three_model <- glmer(pragChoice ~ Task+Scaled.Days.Old + (Task|trial) + (1|Subject), data=threefour.long, family="binomial")
#that last doesn't converge! So test again with (1|trial)
nomax_three_model <- glmer(pragChoice ~ Task*Scaled.Days.Old + (1|trial) + (1|Subject), data=threefour.long, family="binomial")
nomaxnoeff_three_model <- glmer(pragChoice ~ Task+Scaled.Days.Old + (1|trial) + (1|Subject), data=threefour.long, family="binomial")
anova(nomax_three_model,nomaxnoeff_three_model)
threes_m <- subset(maintable, Age.Years == 3)
fours_m <- subset(maintable, Age.Years == 4)
fives <- subset(maintable, Age.Years == 5)
sixes <- subset(maintable, Age.Years == 6)
threes_c <- subset(conttable, Age.Years == 3)
fours_c <- subset(conttable, Age.Years == 4)
print('threes')
multinomial.test(as.vector(table(threes_m$pragChoiceScore)),c(0.25, 0.5, 0.25))
print('fours')
multinomial.test(as.vector(table(fours_m$pragChoiceScore)),c(0.25, 0.5, 0.25))
print('fives')
multinomial.test(as.vector(table(fives$pragChoiceScore)),c(0.25, 0.5, 0.25))
print('sixes')
multinomial.test(as.vector(table(sixes$pragChoiceScore)),c(0.25, 0.5, 0.25))
print('threes, control experiment')
multinomial.test(as.vector(table(threes_c$pragChoiceScore)),c(0.25, 0.5, 0.25))
print('fours, control experiment')
multinomial.test(as.vector(table(fours_c$pragChoiceScore)),c(0.25, 0.5, 0.25))
#Trying the binned version:
threetab <- rbind(as.vector(table(threes_c$pragChoiceScore)), as.vector(table(threes_m$pragChoiceScore)))
fourtab <- rbind(as.vector(table(fours_c$pragChoiceScore)), as.vector(table(fours_m$pragChoiceScore)))
fisher.test(threetab)
fisher.test(fourtab)
library(RColorBrewer)
graph.main.long
main.long$Age.Years <- as.numeric(as.character(main.long$Age.Years))
main.long$Age.Months <- as.numeric(as.character(main.long$Age.Months))
graph.main.long <- main.long %>%
group_by(Subject, Age.Years, Age.Months) %>%
summarise(pragScore = mean(pragChoice)) %>%
filter(Age.Years > 2) %>%
filter(Age.Years < 7) %>%
ungroup() %>%
mutate(YearMonths = Age.Years*12 + Age.Months) %>%
group_by(YearMonths)%>%
summarise_at(c("pragScore"), funs(mean.na.rm, bootup, bootdown))
graph.main.long
graph.main.long <- main.long %>%
group_by(Subject, Age.Years, Age.Months) %>%
summarise(pragScore = mean(pragChoice)) %>%
filter(Age.Years > 2) %>%
filter(Age.Years < 7) %>%
ungroup() %>%
mutate(YearMonths = Age.Years*12 + Age.Months) %>%
group_by(Age.Years)%>%
summarise_at(c("pragScore"), funs(mean.na.rm, bootup, bootdown))
ggplot(data=graph.main.long, aes(x=Age.Years, y=mean.na.rm, fill=Age.Years)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(0,1)) +
xlab('Age in years') +
ylab('Percent helpful speakers chosen') +
theme(legend.key = element_blank()) +
theme_bw() +
theme(strip.background = element_blank()) +
theme(text = element_text(family="Times", size=rel(4))) +
theme(legend.text = element_text(family="Times", size=rel(4))) +
theme(axis.text = element_text(family="Times", size=rel(0.9))) +
theme(strip.text = element_text(family="Times", size=rel(0.9)))
Scores <- aggregate(main.long$pragChoice, list(main.long$Subject), sum)
names(Scores) <- c("Subject","Score")
Ages <- main.long[ !duplicated(main.long$Subject), c("Subject","Days.Old")]
foo <- merge(Scores,Ages)
foo$JitScore <- jitter(foo$Score)
plot( foo$Days.Old, foo$JitScore)
p1 = mean(subset(cont.long, Age.Years < 4)$pragChoice)
multi = c(p1^2, 2*p1*(1-p1), (1-p1)^2)
nullmulti = c(0.25,0.5,0.25)
w = sqrt(((multi[1]-nullmulti[1])^2)/nullmulti[1] + ((multi[2]-nullmulti[2])^2)/nullmulti[2] + ((multi[3]-nullmulti[3])^2)/nullmulti[3])
pwr.chisq.test(w = w,  sig.level = 0.05, power = 0.8, df=2)
help(pwr.chisq.test)
??pwr.chisq.test
library(pwr)
p1 = mean(subset(cont.long, Age.Years < 4)$pragChoice)
multi = c(p1^2, 2*p1*(1-p1), (1-p1)^2)
nullmulti = c(0.25,0.5,0.25)
w = sqrt(((multi[1]-nullmulti[1])^2)/nullmulti[1] + ((multi[2]-nullmulti[2])^2)/nullmulti[2] + ((multi[3]-nullmulti[3])^2)/nullmulti[3])
pwr.chisq.test(w = w,  sig.level = 0.05, power = 0.8, df=2)
