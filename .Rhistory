tmp <- read.table(filename, header=FALSE, sep=" ")
names(tmp) <- c("Subject", "Trial.Number", "Item.Number", "Item",
"First.Side", "Causal.Side", "Response.Causal", "Choice.Causal", "Response.NC", "Choice.NC", "Yesfirst", "Touch.Key", "Choice.T")
mydata2 <- rbind(mydata2, tmp)
}
##Relabel "Touching" data to match above
mydata2$Touching <- NA
mydata2[mydata2$Touch.Key=="z",]$Touching <- "left"
mydata2[mydata2$Touch.Key=="c",]$Touching <- "right"
mydata2$Touching <- as.factor(mydata2$Touching)
#Add the relevant participant data
mydata2 <- merge(mydata2, pdata, by=c("Subject"))
#Merge the two sets of data together
inter <- intersect(names(mydata), names(mydata2))
mydata <- subset(mydata, select=inter)
mydata2 <- subset(mydata2, select=inter)
mydata <- rbind(mydata, mydata2) #Probably doesn't work if some have extra columns - matches by first dataframe column names!
######
#SUBJECT REMOVAL - FUSS OUT/AGE
#Remove subjects who are too young or fussed out of study
mydata <- mydata[(mydata$Age.Years > 2),]
#Remove fuss-outs (double check)
mydata <- mydata[(mydata$Subject != 5),] #Fuss outs
mydata <- mydata[(mydata$Subject != 8),]
mydata <- mydata[(mydata$Subject != 12),]
mydata <- mydata[(mydata$Subject != 18),] #Fuss outs
mydata <- mydata[(mydata$Subject != 20),]
mydata <- mydata[(mydata$Subject != 22),]
mydata <- mydata[(mydata$Subject != 30),]
mydata <- mydata[(mydata$Subject != 31),]
mydata <- mydata[(mydata$Subject != 32),]
mydata <- mydata[(mydata$Subject != 33),]
mydata <- mydata[(mydata$Subject != 34),]
######
#SUBJECT REMOVAL - PRETEST
#Calculate pretest scores and find out who should be removed for failure to pass
##Find causal/non side for Pilk pretest trial
mydata$Pilk.CausalSide <- NULL
for (i in 1:nrow(mydata)) {
if (mydata$Trial.A.1[i] == "Pilk.C") {
mydata$Pilk.CausalSide[i] <- as.character(mydata$Side.A.1[i])
} else if (mydata$Trial.A.1[i] == "Pilk.NC"){
mydata$Pilk.CausalSide[i] <- as.character(mydata$Side.A.2[i]) }
}
mydata$Pilk.CausalSide <- as.factor(mydata$Pilk.CausalSide)
#levels(mydata$Pilk.CausalSide) <- c("right", "left")
mydata$Pilk.NonSide <- NULL
for (i in 1:nrow(mydata)) {
if (mydata$Pilk.CausalSide[i] == "left") {
mydata$Pilk.NonSide[i] <- "right"
} else {
mydata$Pilk.NonSide[i] <- "left" }
}
#levels(mydata$Pilk.NonSide) <- c("right", "left")
mydata$Pilk.NonSide <- as.factor(mydata$Pilk.NonSide)
##Find causal/non side for Gorp pretest trial
mydata$Gorp.CausalSide <- NA
for (i in 1:nrow(mydata)) {
if (mydata$Trial.B.1[i] == "Gorp.C") {
mydata$Gorp.CausalSide[i] <- as.character(mydata$Side.B.1[i])
} else if (mydata$Trial.B.1[i] == "Gorp.NC"){
mydata$Gorp.CausalSide[i] <- as.character(mydata$Side.B.2[i]) }
}
mydata$Gorp.CausalSide <- as.factor(mydata$Gorp.CausalSide)
#levels(mydata$Gorp.CausalSide) <- c("left", "right")
mydata$Gorp.NonSide <- NULL
for (i in 1:nrow(mydata)) {
if (mydata$Gorp.CausalSide[i] == "left") {
mydata$Gorp.NonSide[i] <- "right"
} else {
mydata$Gorp.NonSide[i] <- "left" }
}
mydata$Gorp.NonSide <- as.factor(mydata$Gorp.NonSide)
#levels(mydata$Gorp.NonSide) <- c("left", "right")
###
#HAND OUT PRETEST SCORES
###
names(mydata)
mydata$Subject
length(unique(mydata$Subject))
####TVW -from before automated touch trials
#Load in the data from the TVW files
mydata <- data.frame(NULL)
participants <- c(1,2,3,4,5,6,7,9,10,11,13,14,15,16,17) #fussed out & didn'trecord: 8, 12
for(f in participants) {
tryCatch({filename = paste('Data_full/TVW_', f, '.dat', sep='')}, finally="")
tmp <- read.table(filename, header=FALSE, sep=" ")
names(tmp) <- c("Subject", "Trial.Number", "Item.Number", "Item",
"First.Side", "Causal.Side", "Response.Causal", "Choice.Causal", "Response.NC", "Choice.NC", "Yesfirst")
mydata <- rbind(mydata, tmp)
}
#Load in the data about participants and pretest/touch performance
pdata <- data.frame(NULL)
pdata <- read.table('Participants_FCW.csv', header=TRUE, sep=',')
mydata <- merge(mydata, pdata, by=c("Subject"))
#Add correct 'touch' data onto the mydata dataframe
trial.numbers <- c(1,2,3,4)
#loop over trial numbers and add the touch data correctly
touchdata <- data.frame(NULL)
for(i in trial.numbers) {
tmp <- pdata[,c("Subject",paste("Item", i, sep="."),paste("Touching", i, sep="."))]
names(tmp) <- c("Subject", "Item", "Touching")
tmp$Trial.Number <- i
touchdata <- rbind(touchdata,tmp)
}
mydata <- merge(mydata,touchdata, by=c("Subject", "Item", "Trial.Number"), all.x = TRUE)
####TVW_new -from with automated touch trials
mydata2 <- data.frame(NULL)
participants <- c(19,21,23,24,25,26,27,28,29,35,36,37,38,39) #fussed out, bilingual, pilot: 18, 20, 22, 30-34,
for(f in participants) {
tryCatch({filename = paste('Data_full/TVW_', f, '.dat', sep='')}, finally="")
tmp <- read.table(filename, header=FALSE, sep=" ")
names(tmp) <- c("Subject", "Trial.Number", "Item.Number", "Item",
"First.Side", "Causal.Side", "Response.Causal", "Choice.Causal", "Response.NC", "Choice.NC", "Yesfirst", "Touch.Key", "Choice.T")
mydata2 <- rbind(mydata2, tmp)
}
##Relabel "Touching" data to match above
mydata2$Touching <- NA
mydata2[mydata2$Touch.Key=="z",]$Touching <- "left"
mydata2[mydata2$Touch.Key=="c",]$Touching <- "right"
mydata2$Touching <- as.factor(mydata2$Touching)
#Add the relevant participant data
mydata2 <- merge(mydata2, pdata, by=c("Subject"))
#Merge the two sets of data together
inter <- intersect(names(mydata), names(mydata2))
mydata <- subset(mydata, select=inter)
mydata2 <- subset(mydata2, select=inter)
mydata <- rbind(mydata, mydata2) #Probably doesn't work if some have extra columns - matches by first dataframe column names!
######
#SUBJECT REMOVAL - FUSS OUT/AGE
#Remove subjects who are too young or fussed out of study
mydata <- mydata[(mydata$Age.Years > 2),]
#Remove fuss-outs (double check)
mydata <- mydata[(mydata$Subject != 5),] #Fuss outs
mydata <- mydata[(mydata$Subject != 8),]
mydata <- mydata[(mydata$Subject != 12),]
mydata <- mydata[(mydata$Subject != 18),] #Fuss outs
mydata <- mydata[(mydata$Subject != 20),]
mydata <- mydata[(mydata$Subject != 22),]
mydata <- mydata[(mydata$Subject != 30),]
mydata <- mydata[(mydata$Subject != 31),]
mydata <- mydata[(mydata$Subject != 32),]
mydata <- mydata[(mydata$Subject != 33),]
mydata <- mydata[(mydata$Subject != 34),]
######
#SUBJECT REMOVAL - PRETEST
#Calculate pretest scores and find out who should be removed for failure to pass
##Find causal/non side for Pilk pretest trial
mydata$Pilk.CausalSide <- NULL
for (i in 1:nrow(mydata)) {
if (mydata$Trial.A.1[i] == "Pilk.C") {
mydata$Pilk.CausalSide[i] <- as.character(mydata$Side.A.1[i])
} else if (mydata$Trial.A.1[i] == "Pilk.NC"){
mydata$Pilk.CausalSide[i] <- as.character(mydata$Side.A.2[i]) }
}
mydata$Pilk.CausalSide <- as.factor(mydata$Pilk.CausalSide)
#levels(mydata$Pilk.CausalSide) <- c("right", "left")
mydata$Pilk.NonSide <- NULL
for (i in 1:nrow(mydata)) {
if (mydata$Pilk.CausalSide[i] == "left") {
mydata$Pilk.NonSide[i] <- "right"
} else {
mydata$Pilk.NonSide[i] <- "left" }
}
#levels(mydata$Pilk.NonSide) <- c("right", "left")
mydata$Pilk.NonSide <- as.factor(mydata$Pilk.NonSide)
##Find causal/non side for Gorp pretest trial
mydata$Gorp.CausalSide <- NA
for (i in 1:nrow(mydata)) {
if (mydata$Trial.B.1[i] == "Gorp.C") {
mydata$Gorp.CausalSide[i] <- as.character(mydata$Side.B.1[i])
} else if (mydata$Trial.B.1[i] == "Gorp.NC"){
mydata$Gorp.CausalSide[i] <- as.character(mydata$Side.B.2[i]) }
}
mydata$Gorp.CausalSide <- as.factor(mydata$Gorp.CausalSide)
#levels(mydata$Gorp.CausalSide) <- c("left", "right")
mydata$Gorp.NonSide <- NULL
for (i in 1:nrow(mydata)) {
if (mydata$Gorp.CausalSide[i] == "left") {
mydata$Gorp.NonSide[i] <- "right"
} else {
mydata$Gorp.NonSide[i] <- "left" }
}
mydata$Gorp.NonSide <- as.factor(mydata$Gorp.NonSide)
#levels(mydata$Gorp.NonSide) <- c("left", "right")
###
#HAND OUT PRETEST SCORES
###
##Try to give a score for Pilk.Touch.Score
mydata$Pilk.Touch.Score <- NA
for (i in 1:nrow(mydata)) {
if (is.na(mydata$ForceTouch.A.Ans[i])){
##Didn't do forced choice, check free response
mydata$Pilk.Touch.Score[i] <- NA
s = 0
if (mydata$Trial.A.1[i] == "Pilk.C"){
s = s + mydata$Touch.A.1[i] + (1-mydata$Touch.A.2[i])
} else if (mydata$Trial.A.1[i] == "Pilk.NC"){
s = s + mydata$Touch.A.2[i] + (1-mydata$Touch.A.1[i])
}
##Did they get both right?
if (s == 2){
mydata$Pilk.Touch.Score[i] <- 1
} else {
mydata$Pilk.Touch.Score[i] <- 0
}
} else if (mydata$ForceTouch.A.Q[i] == "Touching"){
##Did Forced choice
if (mydata$ForceTouch.A.Ans[i] == mydata$Pilk.CausalSide[i]){
mydata$Pilk.Touch.Score[i] <- 1
} else if (mydata$ForceTouch.A.Ans[i] == mydata$Pilk.NonSide[i]){
mydata$Pilk.Touch.Score[i] <- 0
}
} else if (mydata$ForceTouch.A.Q[i] == "NotTouching"){
if (mydata$ForceTouch.A.Ans[i] == mydata$Pilk.NonSide[i]){
mydata$Pilk.Touch.Score[i] <- 1
} else if (mydata$ForceTouch.A.Ans[i] == mydata$Pilk.CausalSide[i]){
mydata$Pilk.Touch.Score[i] <- 0
}
}
}
##Try to give a score for Pilk.Causal.Score
mydata$Pilk.Cause.Score <- NA
for (i in 1:nrow(mydata)) {
if (is.na(mydata$ForceCause.A.Ans[i])){
mydata$Pilk.Cause.Score[i] <- NA
##Didn't do force choice, check free response
s = 0
if (mydata$Trial.A.1[i] == "Pilk.C"){
s = s + mydata$Cause.A.1[i] + (1-mydata$Cause.A.2[i])
} else if (mydata$Trial.A.1[i] == "Pilk.NC"){
s = s + mydata$Cause.A.2[i] + (1-mydata$Cause.A.1[i])
}
##Did they get both right?
if (s == 2){
mydata$Pilk.Cause.Score[i] <- 1
} else {
mydata$Pilk.Cause.Score[i] <- 0
}
} else if (mydata$ForceCause.A.Q[i] == "SarahDid"){
if (mydata$ForceCause.A.Ans[i] == mydata$Pilk.CausalSide[i]){
mydata$Pilk.Cause.Score[i] <- 1
} else if (mydata$ForceCause.A.Ans[i] == mydata$Pilk.NonSide[i]){
mydata$Pilk.Cause.Score[i] <- 0
}
} else if (mydata$ForceCause.A.Q[i] == "SarahDidnt"){
if (mydata$ForceCause.A.Ans[i] == mydata$Pilk.NonSide[i]){
mydata$Pilk.Cause.Score[i] <- 1
} else if (mydata$ForceCause.A.Ans[i] == mydata$Pilk.CausalSide[i]){
mydata$Pilk.Cause.Score[i] <- 0
}
}
}
##Try to give a score for Gorp.Touch.Score
mydata$Gorp.Touch.Score <- NA
for (i in 1:nrow(mydata)) {
if (is.na(mydata$ForceTouch.B.Ans[i])){
##Didn't do forced choice, check free response
mydata$Gorp.Touch.Score[i] <- NA
s = 0
if (mydata$Trial.B.1[i] == "Gorp.C"){
s = mydata$Touch.B.1[i] + (1-mydata$Touch.B.2[i])
} else if (mydata$Trial.B.1[i] == "Gorp.NC"){
s = mydata$Touch.B.2[i] + (1-mydata$Touch.B.1[i])
}
##Did they get both right?
if (s == 2){
mydata$Gorp.Touch.Score[i] <- 1
} else {
mydata$Gorp.Touch.Score[i] <- 0
}
} else if (mydata$ForceTouch.B.Q[i] == "Touching"){
if (mydata$ForceTouch.B.Ans[i] == mydata$Gorp.CausalSide[i]){
mydata$Gorp.Touch.Score[i] <- 1
} else if (mydata$ForceTouch.B.Ans[i] == mydata$Gorp.NonSide[i]){
mydata$Gorp.Touch.Score[i] <- 0
}
} else if (mydata$ForceTouch.B.Q[i] == "NotTouching"){
if (mydata$ForceTouch.B.Ans[i] == mydata$Gorp.NonSide[i]){
mydata$Gorp.Touch.Score[i] <- 1
} else if (mydata$ForceTouch.B.Ans[i] == mydata$Gorp.CausalSide[i]){
mydata$Gorp.Touch.Score[i] <- 0
}
}
}
##Try to give a score for Gorp.Causal.Score
mydata$Gorp.Cause.Score <- NA
for (i in 1:nrow(mydata)) {
if (is.na(mydata$ForceCause.B.Ans[i])){
mydata$Gorp.Cause.Score[i] <- NA
##Didn't do force choice, check free response
s = 0
if (mydata$Trial.B.1[i] == "Gorp.C"){
s = s + mydata$Cause.B.1[i] + (1-mydata$Cause.B.2[i])
} else if (mydata$Trial.B.1[i] == "Gorp.NC"){
s = s + mydata$Cause.B.2[i] + (1-mydata$Cause.B.1[i])
}
##Did they get both right?
if (s == 2){
mydata$Gorp.Cause.Score[i] <- 1
} else {
mydata$Gorp.Cause.Score[i] <- 0
}
} else if (mydata$ForceCause.B.Q[i] == "SarahDid"){
if (mydata$ForceCause.B.Ans[i] == mydata$Gorp.CausalSide[i]){
mydata$Gorp.Cause.Score[i] <- 1
} else if (mydata$ForceCause.B.Ans[i] == mydata$Gorp.NonSide[i]){
mydata$Gorp.Cause.Score[i] <- 0
}
} else if (mydata$ForceCause.B.Q[i] == "SarahDidnt"){
if (mydata$ForceCause.B.Ans[i] == mydata$Gorp.NonSide[i]){
mydata$Gorp.Cause.Score[i] <- 1
} else if (mydata$ForceCause.B.Ans[i] == mydata$Gorp.CausalSide[i]){
mydata$Gorp.Cause.Score[i] <- 0
}
}
}
##Calculate whether they pass pretest
for (i in 1:nrow(mydata)) {
mydata$Pass.Score[i] <- sum(mydata$Pilk.Touch.Score[i], mydata$Pilk.Cause.Score[i], mydata$Gorp.Touch.Score[i], mydata$Gorp.Cause.Score[i], na.rm=TRUE)
}
##Pass 1 and 6 manually because they got 3/4 of Gorp free questions correct,
##This was only for early pilot kids who didn't get forced choice Qs
mydata[mydata$Subject==1,]$Pass.Score <- 3
mydata[mydata$Subject==6,]$Pass.Score <- 3
##Keep passers only
mydata <- mydata[(mydata$Pass.Score > 2),]
################################################
#####DEMOGRAPHICS
#means days old - Note, make sure it counts subjects, not trials!
collapsed <- mydata[!duplicated(mydata$Subject),]
mean(aggregate(collapsed$Days.Old, by=list(collapsed$Subject), mean))
foo <- subset(collapsed, select=c("Subject", "Days.Old"))
min(foo$Days.Old)
max(foo$Days.Old)
#Number of girls - Note, make sure it counts subjects, not trials!
foo <- subset(collapsed, select=c("Subject", "Gender"))
nrow(foo[foo$Gender=="F",])
nrow(foo[foo$Gender=="M",])
#aggregate the "pilking"/"notpilking" choices in a new dataframe
sum.na.rm <- function(x) { sum(x,na.rm=T) }
NotPilkingScores <- aggregate(mydata$Choice.NC, by=list(mydata$Subject), sum.na.rm)
PilkingScores <- aggregate(mydata$Choice.C, by=list(mydata$Subject), sum.na.rm)
#Means & SEM for graphs!
mean(NotPilkingScores$x)
sd(NotPilkingScores$x)/sqrt(length(NotPilkingScores$x))
mean(PilkingScores$x)
sd(PilkingScores$x)/sqrt(length(PilkingScores$x))
wilcox.test(PilkingScores$x, mu=2, exact=FALSE, conf.int=TRUE)
mean(PilkingScores$x)
wilcox.test(NotPilkingScores$x, mu=2, exact=FALSE, conf.int=TRUE)
mean(NotPilkingScores$x)
setwd("~/Dropbox/_Projects/SubDrop - Comprehension/SubDrop Github Repository")
f
#Analysis of the SubjectDrop study!
#Reading in all libraries that we'll use
library(irr)
library(stringr)
library(languageR)
library(lme4)
library(multcomp)
library(binom)
mean.na.rm <- function(x) { mean(x,na.rm=T) }
sum.na.rm <- function(x) { sum(x,na.rm=T) }
stderr <- function(x) sqrt(var(x)/length(x))
#Get directory of this file
directory = getwd()
#Initialize dataset
subtable = data.frame(NULL)
#Load csv with Alldata into variable
subtable = read.csv(paste0(directory, "/SubDropSpeakers_Data.csv"), header = TRUE, stringsAsFactors = FALSE)
#Fix some NA columns
subtable[is.na(subtable$Strict.include),]$Strict.include <- 0
subtable$Kid.Response.A...Prag.Choice. <- as.character (subtable$Kid.Response.A...Prag.Choice.)
subtable$Kid.Response.B...Prag.Choice. <- as.character (subtable$Kid.Response.B...Prag.Choice.)
subtable[is.na(subtable)] <- 0
#subtable[is.na(subtable$Include.subject),]$Include.subject <- 0
####################################
#Pick subset of data to analyze
#Drop non-included kids!
subtable <- subtable[subtable$Include.subject. == "1",]
#Drop early version of kidsecret (confusing instructions)
subtable <- subtable[subtable$Experiment != "KidSecret",]
#How many kids of each Age, Experiment, Condition?
with(subtable, tapply(as.numeric(as.character(Include.subject.)), list(Experiment, Condition, Age.Years), sum.na.rm), drop=TRUE)
#Analysis of the SubjectDrop study!
#Reading in all libraries that we'll use
library(irr)
library(stringr)
library(languageR)
library(lme4)
library(multcomp)
library(binom)
mean.na.rm <- function(x) { mean(x,na.rm=T) }
sum.na.rm <- function(x) { sum(x,na.rm=T) }
stderr <- function(x) sqrt(var(x)/length(x))
#Get directory of this file
directory = getwd()
#Initialize dataset
subtable = data.frame(NULL)
#Load csv with Alldata into variable
subtable = read.csv(paste0(directory, "/SubDropSpeakers_Data.csv"), header = TRUE, stringsAsFactors = FALSE)
#Fix some NA columns
subtable[is.na(subtable$Strict.include),]$Strict.include <- 0
subtable$Kid.Response.A...Prag.Choice. <- as.character (subtable$Kid.Response.A...Prag.Choice.)
subtable$Kid.Response.B...Prag.Choice. <- as.character (subtable$Kid.Response.B...Prag.Choice.)
subtable[is.na(subtable)] <- 0
#subtable[is.na(subtable$Include.subject),]$Include.subject <- 0
####################################
#Pick subset of data to analyze
#Drop non-included kids!
subtable <- subtable[subtable$Include.subject. == "1",]
#Drop early version of kidsecret (confusing instructions)
subtable <- subtable[subtable$Experiment != "KidSecret",]
##Look at n kids in sub-experiments (good for checking updates on n subjects needed per condition)
##How many kids of each Age, Experiment, Condition?
#with(subtable, tapply(as.numeric(as.character(Include.subject.)), list(Experiment, Condition, Age.Years), sum.na.rm), drop=TRUE)
#
##Get info for individual sub-experiments (good for updating 'subjects needed' on ongoing exps)
#subtable$Age.Years <- as.numeric(as.character(subtable$Age.Years))
#subtable$Gender <- subtable$Gender..Guessed.from.Name.Appearance.
#PSecret <- subtable[subtable$Experiment == "ParentSecret",]
#KSecret <- subtable[subtable$Experiment == "KidSecret-New",]
#
#Parent56 <- PSecret[PSecret$Age.Years >4,]
#Parent34 <- PSecret[PSecret$Age.Years < 5,]
#Kid56 <- KSecret[KSecret$Age.Years>4,]
#with(Parent34, tapply(as.numeric(as.character(Include.subject.)), list(Condition, Age.Years, Gender), sum.na.rm), drop=TRUE)
#with(Kid56, tapply(as.numeric(as.character(Include.subject.)), list(Condition, Age.Years, Gender), sum.na.rm), drop=TRUE)
#Choose ParentSecret on older children
subtable <- subtable[subtable$Experiment == "ParentSecret",]
subtable <- subtable[subtable$Age.Years > 4,]
table(subtable$Condition, subtable$choseObjectDrop)
table(subtable$Condition, subtable$pragChoiceScore)
#############################################
# Recode variables
#SD: 'subject drop' is the 'correct answer', other name for this condition is 'two fruits'
#OD: aka 'two animals'
subtable$isPragChoiceA <- "NA"
subtable[subtable$Condition == "SD" & subtable$Kid.Response.A...Prag.Choice. == "monkey eat",]$isPragChoiceA <- 0
subtable[subtable$Condition == "SD" & subtable$Kid.Response.A...Prag.Choice. == "eat orange",]$isPragChoiceA <- 1
subtable[subtable$Condition == "OD" & subtable$Kid.Response.A...Prag.Choice. == "monkey eat",]$isPragChoiceA <- 1
subtable[subtable$Condition == "OD" & subtable$Kid.Response.A...Prag.Choice. == "eat orange",]$isPragChoiceA <- 0
subtable$isPragChoiceB <- "NA"
subtable[subtable$Condition == "SD" & subtable$Kid.Response.B...Prag.Choice. == "girl pet",]$isPragChoiceB <- 0
subtable[subtable$Condition == "SD" & subtable$Kid.Response.B...Prag.Choice. == "pet dog",]$isPragChoiceB <- 1
subtable[subtable$Condition == "OD" & subtable$Kid.Response.B...Prag.Choice. == "girl pet",]$isPragChoiceB <- 1
subtable[subtable$Condition == "OD" & subtable$Kid.Response.B...Prag.Choice. == "pet dog",]$isPragChoiceB <- 0
subtable$isPragChoiceA <- as.numeric(as.character(subtable$isPragChoiceA))
subtable$isPragChoiceB <- as.numeric(as.character(subtable$isPragChoiceB))
subtable$pragChoiceScore <- subtable$isPragChoiceA + subtable$isPragChoiceB
subtable$choseObjectDrop <- subtable$pragChoiceScore
subtable[subtable$Condition == "SD",]$choseObjectDrop <- 2-subtable[subtable$Condition == "SD",]$pragChoiceScore
####################################
#Descriptive stats for graph
table(subtable$Condition, subtable$choseObjectDrop)
table(subtable$Condition, subtable$pragChoiceScore)
####################################
# Analysis
#First make some necessary things factors, and melt the dataset
subtable$Condition <- as.factor(subtable$Condition)
subtable$Subject <- as.factor(subtable$Subject..)
subtable$choseObjectDrop <- as.factor(subtable$choseObjectDrop)
subtable$pragChoice_1 <- subtable$isPragChoiceA
subtable$pragChoice_2 <- subtable$isPragChoiceB
sub.long = wideToLong(subtable,within="trial", sep='_')
sub.long$choseObjectDrop <- sub.long$pragChoice
sub.long[sub.long$Condition == "SD",]$choseObjectDrop <- 1-sub.long[sub.long$Condition == "SD",]$pragChoice
# Logistic Regression models
full_maximal_model <- lmer(choseObjectDrop ~ Condition + (Condition|trial), data=sub.long, family="binomial")
summary(full_maximal_model)
no_fixed <- lmer(choseObjectDrop ~ 1 + (Condition|trial), data=sub.long, family="binomial")
anova(full_maximal_model, no_fixed)
#Now try those stats with our tiny group of correctly done kids!
sub.strict <- sub.long[sub.long$Strict.include == 1,]
full_maximal_strict <- lmer(choseObjectDrop ~ Condition + (Condition|trial), data=sub.strict, family="binomial")
summary(full_maximal_strict)
no_fixed_strict <- lmer(choseObjectDrop ~ 1 + (Condition|trial), data=sub.strict, family="binomial")
anova(full_maximal_strict, no_fixed_strict)
library(dplyr)
#First make some necessary things factors, and melt the dataset
subtable$Condition <- as.factor(subtable$Condition)
subtable$Subject <- as.factor(subtable$Subject..)
subtable$choseObjectDrop <- as.factor(subtable$choseObjectDrop)
subtable$pragChoice_1 <- subtable$isPragChoiceA
subtable$pragChoice_2 <- subtable$isPragChoiceB
sub.long = wideToLong(subtable,within="trial", sep='_')
library(lsr)
#First make some necessary things factors, and melt the dataset
subtable$Condition <- as.factor(subtable$Condition)
subtable$Subject <- as.factor(subtable$Subject..)
subtable$choseObjectDrop <- as.factor(subtable$choseObjectDrop)
subtable$pragChoice_1 <- subtable$isPragChoiceA
subtable$pragChoice_2 <- subtable$isPragChoiceB
sub.long = wideToLong(subtable,within="trial", sep='_')
sub.long$choseObjectDrop <- sub.long$pragChoice
sub.long[sub.long$Condition == "SD",]$choseObjectDrop <- 1-sub.long[sub.long$Condition == "SD",]$pragChoice
# Logistic Regression models
full_maximal_model <- lmer(choseObjectDrop ~ Condition + (Condition|trial), data=sub.long, family="binomial")
summary(full_maximal_model)
sub.strict <- sub.long[sub.long$Strict.include == 1,]
full_maximal_strict <- lmer(choseObjectDrop ~ Condition + (Condition|trial), data=sub.strict, family="binomial")
summary(full_maximal_strict)
length(unique(sub.long$Subject))
41/2
length(unique(sub.strict$Subject))
full_maximal_model <- lmer(choseObjectDrop ~ Condition + (Condition|trial), data=sub.long, family="binomial")
summary(full_maximal_model)
sub.strict <- sub.long[sub.long$Strict.include == 1,]
full_maximal_strict <- lmer(choseObjectDrop ~ Condition + (Condition|trial), data=sub.strict, family="binomial")
summary(full_maximal_strict)
table(subtable$Condition, subtable$choseObjectDrop)
